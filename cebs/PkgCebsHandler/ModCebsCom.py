'''
Created on 2018/5/2

@author: Administrator
'''

####!/usr/bin/python3.6
#### -*- coding: UTF-8 -*-

import random
import sys
import time
import json
import os
import re
import urllib
import http
import socket


#STATIC CONFIGURATION AND CAN NOT MODIFY BY HAND
GL_CEBS_ERR_LOG_FILE_NAME_SET = r"cebsErrLog.txt"
GL_CEBS_VISION_CLAS_RESULT_FILE_NAME_SET = r"cebsVsClas.log";
GL_CEBS_CMD_LOG_FILE_NAME_SET = r"cebsCmdLog.txt"
GL_CEBS_VISION_MAX_CAMERA_SEARCH = 15;


#FOLLOWING DYNAMIC PARAMETERS SET
#Global parameter set for PICTURE
GL_CEBS_PIC_PROC_BATCH_INDEX = 0;
GL_CEBS_PIC_PROC_CLAS_INDEX = 0;  #WHICH CATEGORY IS TO BE IDENTIFY
GL_CEBS_PIC_PROC_REMAIN_CNT = 0;
GL_CEBS_CFG_FILE_NAME = r"cebsConfig.ini";
GL_CEBS_PIC_ORIGIN_PATH = r"pic_origin";
GL_CEBS_PIC_MIDDLE_PATH = r"pic_middle";
GL_CEBS_PIC_ABS_ORIGIN_PATH = "";
GL_CEBS_PIC_ABS_MIDDLE_PATH = "";

#Fix point to take picture or not? Formally auto-working shall set as False.
GL_CEBS_PIC_TAKING_FIX_POINT_SET = False; 
#After taking picture, whether the pic identification will be run automatically
GL_CEBS_PIC_CLASSIFIED_AFTER_TAKE_SET = True;
#Whether taking picture will be happened automatically after starting.
GL_CEBS_PIC_AUTO_WORKING_AFTER_START_SET = True;
#Auto taking picture TTI times in minutes
GL_CEBS_PIC_AUTO_WORKING_TTI_IN_MIN = 60;
#CAMERA NUMBER
GL_CEBS_VISION_CAMBER_NBR = -1;
#896*684 is basic resolution! 896*684 / 1792*1374 / 3584*2748
GL_CEBS_VISION_CAMBER_RES_WITDH = 3584; #1792;
GL_CEBS_VISION_CAMBER_RES_HEIGHT = 2748; #1374;

#VISION calibration set
GL_CEBS_VISION_SMALL_LOW_LIMIT = 200;
GL_CEBS_VISION_SMALL_MID_LIMIT = 500;
GL_CEBS_VISION_MID_BIG_LIMIT = 2000;
GL_CEBS_VISION_BIG_UPPER_LIMIT = 5000;
#VISION CLASSIFICATION RESULT ADDUP (输出图像叠加标记)
GL_CEBS_VISION_CLAS_RES_ADDUP_SET = True;
#VIDEO CAPTURE ENABLE OR NOT (视频录制参数)
GL_CEBS_VIDEO_CAPTURE_ENABLE = True;
GL_CEBS_VIDEO_CAPTURE_DUR_IN_SEC = 3;

#ROUNDS of auto-pilot run
GL_CEBS_PILOT_WOKING_ROUNDS_MAX = 5;
#To enable debug UI under MOTOAPI not yet installed. Formally it sets as True.
GL_CEBS_MOTOAPI_INSTALLED_SET = True; 


#MEACHNICAL HARDWARE PLATFORM SCOPE DEFINATION
GL_CEBS_HB_MECHNICAL_PLATFORM_X_MAX = 120000;
GL_CEBS_HB_MECHNICAL_PLATFORM_Y_MAX = 110000;

#CONTROL AXIS DIRECTION
GL_CEBS_HB_TARGET_96_STANDARD = "96_STANDARD";
GL_CEBS_HB_TARGET_96_SD_X_MAX = 120000;
GL_CEBS_HB_TARGET_96_SD_Y_MAX = 90000;
GL_CEBS_HB_TARGET_96_SD_BATCH_MAX = 96;
GL_CEBS_HB_TARGET_96_SD_XDIR_NBR = 12;
GL_CEBS_HB_TARGET_96_SD_YDIR_NBR = 8;
GL_CEBS_HB_TARGET_96_SD_HOLE_DIS = 9000;  #in UM

GL_CEBS_HB_TARGET_48_STANDARD = "48_STANDARD";
GL_CEBS_HB_TARGET_48_SD_X_MAX = 120000;
GL_CEBS_HB_TARGET_48_SD_Y_MAX = 90000;
GL_CEBS_HB_TARGET_48_SD_BATCH_MAX = 48;
GL_CEBS_HB_TARGET_48_SD_XDIR_NBR = 8;
GL_CEBS_HB_TARGET_48_SD_YDIR_NBR = 6;
GL_CEBS_HB_TARGET_48_SD_HOLE_DIS = 12000;  #in UM

GL_CEBS_HB_TARGET_24_STANDARD = "24_STANDARD";
GL_CEBS_HB_TARGET_24_SD_X_MAX = 120000;
GL_CEBS_HB_TARGET_24_SD_Y_MAX = 90000;
GL_CEBS_HB_TARGET_24_SD_BATCH_MAX = 24;
GL_CEBS_HB_TARGET_24_SD_XDIR_NBR = 8;
GL_CEBS_HB_TARGET_24_SD_YDIR_NBR = 6;
GL_CEBS_HB_TARGET_24_SD_HOLE_DIS = 20000;  #in UM

GL_CEBS_HB_TARGET_12_STANDARD = "12_STANDARD";
GL_CEBS_HB_TARGET_12_SD_X_MAX = 120000;
GL_CEBS_HB_TARGET_12_SD_Y_MAX = 90000;
GL_CEBS_HB_TARGET_12_SD_BATCH_MAX = 12;
GL_CEBS_HB_TARGET_12_SD_XDIR_NBR = 4;
GL_CEBS_HB_TARGET_12_SD_YDIR_NBR = 3;
GL_CEBS_HB_TARGET_12_SD_HOLE_DIS = 27000;  #in UM

GL_CEBS_HB_TARGET_6_STANDARD = "6_STANDARD";
GL_CEBS_HB_TARGET_6_SD_X_MAX = 120000;
GL_CEBS_HB_TARGET_6_SD_Y_MAX = 90000;
GL_CEBS_HB_TARGET_6_SD_BATCH_MAX = 6;
GL_CEBS_HB_TARGET_6_SD_XDIR_NBR = 3;
GL_CEBS_HB_TARGET_6_SD_YDIR_NBR = 2;
GL_CEBS_HB_TARGET_6_SD_HOLE_DIS = 40000;  #in UM

#ACTION SELCTION
GL_CEBS_HB_TARGET_TYPE = GL_CEBS_HB_TARGET_96_STANDARD;
GL_CEBS_PIC_ONE_WHOLE_BATCH = GL_CEBS_HB_TARGET_96_SD_BATCH_MAX;

GL_CEBS_HB_HOLE_X_NUM = 0;          #HOW MANY BOARD HOLES， X DIRECTION
GL_CEBS_HB_HOLE_Y_NUM = 0;          #HOW MANY BOARD HOLES，Y DIRECTION
GL_CEBS_HB_WIDTH_X_SCALE = 0;       #HOW MANY BOARD HOLES， X DIRECTION
GL_CEBS_HB_HEIGHT_Y_SCALE = 0;      #HOW MANY BOARD HOLES，Y DIRECTION
'''
左下角的坐标，存在X1/Y1上， 右上角的坐标，存在X2/Y2上 
这种方式，符合坐标系的习惯：小值在X1/Y1中，大值在X2/Y2中
LEFT-BOTTOM for X1/Y1 save in [0/1], RIGHT-UP for X2/Y2 save in [2/3]
'''
GL_CEBS_HB_POS_IN_UM = [0, 0, 0, 0];  #USING INT, um, 96 HOLES, POSITION OF = X1/Y1(LEFT-DOWN), X2/Y2(RIGHT-UP)
GL_CEBS_CUR_POS_IN_UM = [0, 0];  #USING INT, um, POSITION X/Y AXIS

#SERIAL COM NUMBER => THIS NEED SET IN THE BEGINNING, CAN NOT WAIT UNTIL SYSTEM START!
#SO WHOLE DESIGN LOGIC OF MOTO-API SHOULD RE-DONE!
#NOT YET USE FOLLOWING PORT SETTING.
GL_CEBS_COM_NUMBER_SET = 11;


#TEMP USAGE VARIABLES
GL_CEBS_CAMERA_DISPLAY_POS_X = 0;
GL_CEBS_CAMERA_DISPLAY_POS_Y = 0;



'''
#COMMON LIB FUNCTIONS, to simplify the whole design.

CURRENTLY STILL IN TEST PHASE, TO BE ENLARGED FURTHER

'''
class clsL0_MedCFlib():
    
    def __init__(self):    
        super(clsL0_MedCFlib, self).__init__()  
        pass

    def med_cfl_test1(self):
        global GL_CEBS_COM_NUMBER_SET
        print("Test functions! Global parameter Nbr Set = %d" % (GL_CEBS_COM_NUMBER_SET))
        pass

    def med_cfl_add(self, a, b):
        return a+b
    
    #INIT PLATE PRODUCT TYPE, 初始化孔板产品型号
    def med_init_plate_product_type(self):
        global GL_CEBS_HB_TARGET_TYPE
        global GL_CEBS_PIC_ONE_WHOLE_BATCH
        global GL_CEBS_HB_TARGET_96_STANDARD
        global GL_CEBS_HB_TARGET_96_SD_BATCH_MAX
        global GL_CEBS_HB_TARGET_48_STANDARD
        global GL_CEBS_HB_TARGET_48_SD_BATCH_MAX
        global GL_CEBS_HB_TARGET_24_STANDARD
        global GL_CEBS_HB_TARGET_24_SD_BATCH_MAX
        global GL_CEBS_HB_TARGET_12_STANDARD
        global GL_CEBS_HB_TARGET_12_SD_BATCH_MAX
        global GL_CEBS_HB_TARGET_6_STANDARD
        global GL_CEBS_HB_TARGET_6_SD_BATCH_MAX

        if (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_96_STANDARD):
            GL_CEBS_PIC_ONE_WHOLE_BATCH = GL_CEBS_HB_TARGET_96_SD_BATCH_MAX;
        elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_48_STANDARD):
            GL_CEBS_PIC_ONE_WHOLE_BATCH = GL_CEBS_HB_TARGET_48_SD_BATCH_MAX;
        elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_24_STANDARD):
            GL_CEBS_PIC_ONE_WHOLE_BATCH = GL_CEBS_HB_TARGET_24_SD_BATCH_MAX;
        elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_12_STANDARD):
            GL_CEBS_PIC_ONE_WHOLE_BATCH = GL_CEBS_HB_TARGET_12_SD_BATCH_MAX;
        elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_6_STANDARD):
            GL_CEBS_PIC_ONE_WHOLE_BATCH = GL_CEBS_HB_TARGET_6_SD_BATCH_MAX;
        else:
            GL_CEBS_PIC_ONE_WHOLE_BATCH = GL_CEBS_HB_TARGET_96_SD_BATCH_MAX;

    #INIT PLATE PARAMETER, 初始化孔板参数
    def med_init_plate_parameter(self):
        global GL_CEBS_HB_WIDTH_X_SCALE
        global GL_CEBS_HB_HEIGHT_Y_SCALE
        global GL_CEBS_HB_HOLE_X_NUM
        global GL_CEBS_HB_HOLE_Y_NUM
        global GL_CEBS_HB_TARGET_TYPE
        global GL_CEBS_HB_TARGET_96_STANDARD
        global GL_CEBS_HB_TARGET_96_SD_XDIR_NBR
        global GL_CEBS_HB_TARGET_96_SD_YDIR_NBR
        global GL_CEBS_HB_TARGET_96_SD_X_MAX
        global GL_CEBS_HB_TARGET_96_SD_Y_MAX
        global GL_CEBS_HB_TARGET_48_STANDARD
        global GL_CEBS_HB_TARGET_48_SD_XDIR_NBR
        global GL_CEBS_HB_TARGET_48_SD_YDIR_NBR
        global GL_CEBS_HB_TARGET_48_SD_X_MAX
        global GL_CEBS_HB_TARGET_48_SD_Y_MAX
        global GL_CEBS_HB_TARGET_24_STANDARD
        global GL_CEBS_HB_TARGET_24_SD_XDIR_NBR
        global GL_CEBS_HB_TARGET_24_SD_YDIR_NBR
        global GL_CEBS_HB_TARGET_24_SD_X_MAX
        global GL_CEBS_HB_TARGET_24_SD_Y_MAX
        global GL_CEBS_HB_TARGET_12_STANDARD
        global GL_CEBS_HB_TARGET_12_SD_XDIR_NBR
        global GL_CEBS_HB_TARGET_12_SD_YDIR_NBR
        global GL_CEBS_HB_TARGET_12_SD_X_MAX
        global GL_CEBS_HB_TARGET_12_SD_Y_MAX
        global GL_CEBS_HB_TARGET_6_STANDARD
        global GL_CEBS_HB_TARGET_6_SD_XDIR_NBR
        global GL_CEBS_HB_TARGET_6_SD_YDIR_NBR
        global GL_CEBS_HB_TARGET_6_SD_X_MAX
        global GL_CEBS_HB_TARGET_6_SD_Y_MAX
        global GL_CEBS_HB_POS_IN_UM
        
        if (GL_CEBS_HB_WIDTH_X_SCALE == 0 or GL_CEBS_HB_HEIGHT_Y_SCALE == 0 or GL_CEBS_HB_HOLE_X_NUM == 0 or GL_CEBS_HB_HOLE_Y_NUM == 0):
            if (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_96_STANDARD):
                GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_96_SD_XDIR_NBR
                GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_96_SD_YDIR_NBR
                GL_CEBS_HB_WIDTH_X_SCALE = GL_CEBS_HB_TARGET_96_SD_X_MAX / (GL_CEBS_HB_HOLE_X_NUM-1);
                GL_CEBS_HB_HEIGHT_Y_SCALE = GL_CEBS_HB_TARGET_96_SD_Y_MAX / (GL_CEBS_HB_HOLE_Y_NUM-1);
            elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_48_STANDARD):
                GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_48_SD_XDIR_NBR
                GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_48_SD_YDIR_NBR
                GL_CEBS_HB_WIDTH_X_SCALE = GL_CEBS_HB_TARGET_48_SD_X_MAX / (GL_CEBS_HB_HOLE_X_NUM-1);
                GL_CEBS_HB_HEIGHT_Y_SCALE = GL_CEBS_HB_TARGET_48_SD_Y_MAX / (GL_CEBS_HB_HOLE_Y_NUM-1);
            elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_24_STANDARD):
                GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_24_SD_XDIR_NBR
                GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_24_SD_YDIR_NBR
                GL_CEBS_HB_WIDTH_X_SCALE = GL_CEBS_HB_TARGET_24_SD_X_MAX / (GL_CEBS_HB_HOLE_X_NUM-1);
                GL_CEBS_HB_HEIGHT_Y_SCALE = GL_CEBS_HB_TARGET_24_SD_Y_MAX / (GL_CEBS_HB_HOLE_Y_NUM-1);
            elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_12_STANDARD):
                GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_12_SD_XDIR_NBR
                GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_12_SD_YDIR_NBR
                GL_CEBS_HB_WIDTH_X_SCALE = GL_CEBS_HB_TARGET_12_SD_X_MAX / (GL_CEBS_HB_HOLE_X_NUM-1);
                GL_CEBS_HB_HEIGHT_Y_SCALE = GL_CEBS_HB_TARGET_12_SD_Y_MAX / (GL_CEBS_HB_HOLE_Y_NUM-1);
            elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_6_STANDARD):
                GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_6_SD_XDIR_NBR
                GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_6_SD_YDIR_NBR
                GL_CEBS_HB_WIDTH_X_SCALE = GL_CEBS_HB_TARGET_6_SD_X_MAX / (GL_CEBS_HB_HOLE_X_NUM-1);
                GL_CEBS_HB_HEIGHT_Y_SCALE = GL_CEBS_HB_TARGET_6_SD_Y_MAX / (GL_CEBS_HB_HOLE_Y_NUM-1);
            else:
                GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_96_SD_XDIR_NBR
                GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_96_SD_YDIR_NBR
                GL_CEBS_HB_WIDTH_X_SCALE = GL_CEBS_HB_TARGET_96_SD_X_MAX / (GL_CEBS_HB_HOLE_X_NUM-1);
                GL_CEBS_HB_HEIGHT_Y_SCALE = GL_CEBS_HB_TARGET_96_SD_Y_MAX / (GL_CEBS_HB_HOLE_Y_NUM-1);
        if (GL_CEBS_HB_POS_IN_UM[0] !=0 or GL_CEBS_HB_POS_IN_UM[1] !=0 or GL_CEBS_HB_POS_IN_UM[2] !=0 or GL_CEBS_HB_POS_IN_UM[3] !=0):
            #小坐标是左下角，大坐标是右上角
            xWidth = GL_CEBS_HB_POS_IN_UM[2] - GL_CEBS_HB_POS_IN_UM[0];
            yHeight = GL_CEBS_HB_POS_IN_UM[3] - GL_CEBS_HB_POS_IN_UM[1];
            GL_CEBS_HB_WIDTH_X_SCALE = xWidth / (GL_CEBS_HB_HOLE_X_NUM-1);
            GL_CEBS_HB_HEIGHT_Y_SCALE = yHeight / (GL_CEBS_HB_HOLE_Y_NUM-1);
        else:
            pass

    #UPDATE PLATE PARAMETERS, 更新孔板参数
    def med_update_plate_parameter(self):
        global GL_CEBS_HB_WIDTH_X_SCALE
        global GL_CEBS_HB_HEIGHT_Y_SCALE
        global GL_CEBS_HB_HOLE_X_NUM
        global GL_CEBS_HB_HOLE_Y_NUM
        global GL_CEBS_HB_TARGET_TYPE
        global GL_CEBS_HB_TARGET_96_STANDARD
        global GL_CEBS_HB_TARGET_96_SD_XDIR_NBR
        global GL_CEBS_HB_TARGET_96_SD_YDIR_NBR
        global GL_CEBS_HB_TARGET_48_STANDARD
        global GL_CEBS_HB_TARGET_48_SD_XDIR_NBR
        global GL_CEBS_HB_TARGET_48_SD_YDIR_NBR
        global GL_CEBS_HB_TARGET_24_STANDARD
        global GL_CEBS_HB_TARGET_24_SD_XDIR_NBR
        global GL_CEBS_HB_TARGET_24_SD_YDIR_NBR
        global GL_CEBS_HB_TARGET_12_STANDARD
        global GL_CEBS_HB_TARGET_12_SD_XDIR_NBR
        global GL_CEBS_HB_TARGET_12_SD_YDIR_NBR
        global GL_CEBS_HB_TARGET_6_STANDARD
        global GL_CEBS_HB_TARGET_6_SD_XDIR_NBR
        global GL_CEBS_HB_TARGET_6_SD_YDIR_NBR
        global GL_CEBS_HB_POS_IN_UM

        if (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_96_STANDARD):
            GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_96_SD_XDIR_NBR;
            GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_96_SD_YDIR_NBR;
        elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_48_STANDARD):
            GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_48_SD_XDIR_NBR;
            GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_48_SD_YDIR_NBR;
        elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_24_STANDARD):
            GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_24_SD_XDIR_NBR;
            GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_24_SD_YDIR_NBR;
        elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_12_STANDARD):
            GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_12_SD_XDIR_NBR;
            GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_12_SD_YDIR_NBR;
        elif (GL_CEBS_HB_TARGET_TYPE == GL_CEBS_HB_TARGET_6_STANDARD):
            GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_6_SD_XDIR_NBR;
            GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_6_SD_YDIR_NBR;
        else:
            GL_CEBS_HB_HOLE_X_NUM = GL_CEBS_HB_TARGET_96_SD_XDIR_NBR;
            GL_CEBS_HB_HOLE_Y_NUM = GL_CEBS_HB_TARGET_96_SD_YDIR_NBR;
        GL_CEBS_HB_WIDTH_X_SCALE = (GL_CEBS_HB_POS_IN_UM[2] - GL_CEBS_HB_POS_IN_UM[0]) / (GL_CEBS_HB_HOLE_X_NUM-1);
        GL_CEBS_HB_HEIGHT_Y_SCALE = (GL_CEBS_HB_POS_IN_UM[3] - GL_CEBS_HB_POS_IN_UM[1]) / (GL_CEBS_HB_HOLE_Y_NUM-1);












